generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OfferedLoan {
  id         String   @id @default(uuid())
  min        Int
  max        Int
  prepayment Float    @db.Float
  percent    Float    @db.Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Product    Product @relation(fields: [productId], references: [id], map: "OfferedLoans_ibfk_1")
  productId  String
  Provider   User    @relation(fields: [providerId], references: [id], map: "OfferedLoans_ibfk_2")
  providerId String

  @@index([productId])
  @@index([providerId])
}

model TakenLoan {
  id         String   @id @default(uuid())
  amount     Int
  time       Int
  prepayment Float    @db.Float
  percent    Float    @db.Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Provider   User    @relation("Provider_takenLoans", fields: [providerId], references: [id], map: "TakenLoans_ibfk_3")
  providerId String
  Taker      User    @relation("Teker_takenLoans", fields: [takerId], references: [id], map: "TakenLoans_ibfk_1")
  takerId    String
  Product    Product @relation(fields: [productId], references: [id], map: "TakenLoans_ibfk_2")
  productId  String

  @@index([providerId])
  @@index([productId])
  @@index([takerId])
}

model Product {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  image       String?  @db.VarChar(255)
  loans       Int?     @default(0)
  prepayment  Int?     @default(0)
  min         Int?     @default(0)
  max         Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  OfferedLoans OfferedLoan[]
  TakenLoans   TakenLoan[]
  provider     User          @relation(fields: [providerId], references: [id], map: "Products_ibfk_1")
  providerId   String

  @@index([providerId])
}

// model User {
//   id           String        @id @default(uuid())
//   username     String        @db.VarChar(255)
//   email        String        @unique(map: "email") @db.VarChar(255)
//   number       String?       @unique(map: "number") @default("")
//   isManager    Boolean       @default(false)
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   OfferedLoans OfferedLoan[]
//   Providers    TakenLoan[]   @relation("Teker_takenLoans")
//   Takers       TakenLoan[]   @relation("Provider_takenLoans")
//   Products     Product[]
// }

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  number        String?       @unique(map: "number")
  image         String?
  isManager     Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  OfferedLoans  OfferedLoan[]
  Providers     TakenLoan[]   @relation("Teker_takenLoans")
  Takers        TakenLoan[]   @relation("Provider_takenLoans")
  Products      Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
